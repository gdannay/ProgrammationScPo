# Our data set is named `out`, which we split into y and X
y <- out[, 2]
X <- out[, 1]
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
beta
# Now add this line to the plot
plot(out)
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
abline(a=0, b=beta, col="blue")
#Question 3
Z <- c(rep(1,N))
Z
Z <- c(rep(1,N), ncol=1)
Z
Z <- c((rep(1,N)), ncol=1)
Z
Z <- matrix(c(rep(1,N), ncol=1))
Z
Z <- c(rep(1,N))
Z
Z <- rep(1,N)
Z
Z <- rep(1,N)
Z
Z <- matrix(rep(1,N), ncol=1)
Z
X <- matrix(z,out[, 1])
x
y <- out[, 2]
y
X <- matrix(z,out[, 1], )
x
X <- cbind(rep(1, N),out[, 1])
X
y <- out[, 2]
y
X <- matrix(z,out[, 1], ncol=2)
X
X <- matrix((z,out[, 1]), ncol=2)
X
X <- matrix(c(z,out[, 1]), ncol=2)
X
require(MASS)
# Set the correlation parameter and mean
beta = 0.5
SIGMA = matrix(c(1,beta,beta,1), ncol=2)
MU = c(2.0, 1.0)
# Set the sample size
N = 50
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
# Our data set is named `out`, which we split into y and X
y <- out[, 2]
Z <- matrix(rep(1,N), ncol=1)
Z
X <- matrix(c(z,out[, 1]), ncol=2)
X
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
beta
# Now add this line to the plot
plot(out)
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
abline(a=0, b=beta, col="blue")
require(MASS)
# Set the correlation parameter and mean
beta = 0.5
SIGMA = matrix(c(1,beta,beta,1), ncol=2)
MU = c(2.0, 1.0)
# Set the sample size
N = 50
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
# Our data set is named `out`, which we split into y and X
y <- out[, 2]
Z <- matrix(rep(1,N), ncol=1)
Z
X <- matrix(c(z,out[, 1]), ncol=2)
X
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
beta
# Now add this line to the plot
plot(out)
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
abline(a=0, b=beta, col="blue")
require(MASS)
# Set the correlation parameter and mean
beta = 0.5
SIGMA = matrix(c(1,beta,beta,1), ncol=2)
MU = c(2.0, 1.0)
# Set the sample size
N = 50
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
# Our data set is named `out`, which we split into y and X
y <- out[, 2]
Z <- matrix(rep(1,N), ncol=1)
Z
X <- matrix(c(z,out[, 1]), ncol=2)
X
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
beta
# Now add this line to the plot
plot(out)
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
abline(a=0, b=beta, col="blue")
beta = 0.5
SIGMA = matrix(c(1,beta,beta,1), ncol=2)
MU = c(2.0, 1.0)
# Set the sample size
N = 50
# Draw the sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
plot(out)
abline(lm(out[,2]~out[,1]), col="red")
# Our data set is named `out`, which we split into y and X
y <- out[, 2]
y
X <- cbind(rep(1, N),out[, 1])
X
##The only significant modification has to be
#made at this point: a column of "1" is
#added to X
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
#Now beta is a two-dimensional vector: the first element is the estimation of
#b_0 and the second one of b_1
# Now add this line to the plot
plot(out)
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
#The second modification is there: since beta has 2 elements now, b_0 is the
#intercept (so it is the value of a in the abline() function), and b_1 is the
#slope (b in abline())
abline(a=beta[1], b=beta[2], col="blue")
y <- out[, 2]
y
X <- cbind(rep(1, N),out[, 1])
X
X <- matrix(c(z,out[, 1]), ncol=2)
X
require(MASS)
# Set the correlation parameter and mean
beta = 0.5
SIGMA = matrix(c(1,beta,beta,1), ncol=2)
MU = c(2.0, 1.0)
# Set the sample size
N = 50
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
# Our data set is named `out`, which we split into y and X
y <- out[, 2]
Z <- matrix(rep(1,N), ncol=1)
Z
X <- matrix(c(z,out[, 1]), ncol=2)
X
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
beta
# Now add this line to the plot
plot(out)
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
abline(a=0, b=beta, col="blue")
#Question 3
#We just had a third rando variable following a noral distribution
# Set the correlation parameter and mean
beta = 0.5
SIGMA = matrix(c(1,beta, beta, beta, 1, beta, beta, beta, 1), ncol=2)
MU = c(3.0, 2.0, 1.0)
# Set the sample size
N = 50
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
# Our data set is named `out`, which we split into y and X
y <- out[, 2]
Z <- matrix(rep(1,N), ncol=1)
Z
X <- matrix(c(z,out[, 1]), ncol=2)
X
W <- out[,3]
W
#Question 3
#We just had a third rando variable following a noral distribution
# Set the correlation parameter and mean
beta = 0.5
SIGMA = matrix(c(1,beta, beta, beta, 1, beta, beta, beta, 1), ncol=2)
MU = c(3.0, 2.0, 1.0)
# Set the sample size
N = 50
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
out
###########
#Question 3
###########
#In the previous question we tried to estimate in which way x influences y.
#Now we consider that there is another variable that has a normal law. The
#mean of the 3 variables has to be defined, hence MU is a 1*3 vector.
#dimension of the variance-covariance SIGMA matrix was previously 2*2; this time
#it will be 3*3.
#The values of the covariance parameters (ie non diagonal terms of SIGMA) have to
#be defined.
#Definition of means of the three variables y, x1, x2
MU <- c(4, 2, 1)
#Definition of covariance parameters: Cov(x_i, x_j) = c_ij, i<>j;
#c_ij = Var(xi) if i=j. Here we choose all the variances equal to one, and
#others c_ij are arbitrary choosen.
c12<-0.3
c13<-0.6
c23<-0.9
SIGMA = matrix(c(1, c12, c13, c12, 1, c23, c13, c23, 1), ncol = 3)
#In order to have statistical robustness of estimation, a certain number of
#observations is required. Ultimate minimum is generally considered as 30; 200
#is more confortable.
N <- 200
#Definition of the sample:
S<- mvrnorm(N, mu = MU, Sigma = SIGMA)
S
#Question 3
#We just had a third rando variable following a noral distribution
# Set the correlation parameter and mean
beta = 0.5
SIGMA = matrix(c(1,beta, beta, beta, 1, beta, beta, beta, 1), ncol=2)
MU = c(3.0, 2.0, 1.0)
# Set the sample size
N = 50
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
out
# Our data set is named `out`, which we split into y and X
y <- out[, 2]
Z <- matrix(rep(1,N), ncol=1)
Z
X <- matrix(c(z,out[, 1]), ncol=2)
X
W <- out[,3]
W
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%y
beta = invXTX %*% XTy
beta
# Now add this line to the plot
plot(out)
abline(lm(out[,2]~out[,1]), col="red") # regression line (y~x)
abline(a=0, b=beta, col="blue")
#Question 3
#We just had a third rando variable following a noral distribution
# Set the correlation parameter and mean
beta = 0.5
SIGMA = matrix(c(1,beta, beta, beta, 1, beta, beta, beta, 1), ncol=2)
MU = c(3.0, 2.0, 1.0)
# Set the sample size
N = 50
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
out
#Question 3
#We just had a third random variable following a normal distribution
# Set the correlation parameter and mean
beta = 0.5
SIGMA = matrix(c(1,beta, beta, beta, 1, beta, beta, beta, 1), ncol=3)
MU = c(3.0, 2.0, 1.0)
# Set the sample size
N = 50
# Draw your sample
out <- mvrnorm(N, mu = MU, Sigma = SIGMA)
out
# Our data set is named `out`, which we split into y and X
y <- out[, 2]
Z <- matrix(rep(1,N), ncol=1)
Z
X <- matrix(c(z,out[, 1]), ncol=2)
X
W <- out[,3]
W
#Question 3
###########
#In the previous question we tried to estimate in which way x influences y.
#Now we consider that there is another variable that has a normal law. The
#mean of the 3 variables has to be defined, hence MU is a 1*3 vector.
#dimension of the variance-covariance SIGMA matrix was previously 2*2; this time
#it will be 3*3.
#The values of the covariance parameters (ie non diagonal terms of SIGMA) have to
#be defined.
#Definition of means of the three variables y, x1, x2
MU <- c(4, 2, 1)
#Definition of covariance parameters: Cov(x_i, x_j) = c_ij, i<>j;
#c_ij = Var(xi) if i=j. Here we choose all the variances equal to one, and
#others c_ij are arbitrary choosen.
c12<-0.3
c13<-0.6
c23<-0.9
SIGMA = matrix(c(1, c12, c13, c12, 1, c23, c13, c23, 1), ncol = 3)
#In order to have statistical robustness of estimation, a certain number of
#observations is required. Ultimate minimum is generally considered as 30; 200
#is more confortable.
N <- 200
#Definition of the sample:
S<- mvrnorm(N, mu = MU, Sigma = SIGMA)
S
#We want to estimate the coefficients of the regression, for each individual i
#of the sample:
#y_i = beta_0 + beta_1.x_i1 + beta_2.x_i2 + epsilon_i
#Defining Y as the dependent variable and Xi the explanatory variables. We are
#careful to define a vector that contains only 1, in order to take into account
#estimation of beta_0.
Y<-S[, 1]
X<- cbind(rep(1, N), S[, c(2, 3)])
X1<-S[, 2]
X2<-S[, 3]
model<-lm(Y~X1+X2)
summary(model)
model$coefficients
#Computation of the OLS estimators of betas "by hand"
# Now carry out intermediate calculations
XT = t(X)
XTX = XT%*%X
invXTX = solve(XTX)
XTy = XT%*%Y
beta = invXTX %*% XTy
beta
#We check wether estimations of lm() functions and ours are identical:
mat<-cbind(model$coefficients, beta)
print(mat)
#Watching coefficients, they seem equal.
#However, compiling the following line, R returns that there is no equality.
#This might be due to slight difference of computations into the lm() function.
mat[,1]==mat[,2]
step <- 0.001
p <- seq(0, 3, step)
p
MU = c(3.0, 2.0, 1.0)
MU
beta = 0.5
step <- 0.001
MU <- c(seq(0, 3, step)) #We create a
MU
MU <- c(seq(0, 3, step)) #We create a large vector of means
length(MU)
beta = 0.5
step <- 0.001
MU <- c(seq(0, 3, step)) #We create a large vector of means
l <- length(MU)
SIGMA <- matrix(c(rep(0, l)), ncol = l)
SIGMA
beta = 0.5
step <- 0.001
MU <- c(seq(0, 3, step)) #We create a large vector of means
l <- length(MU)
SIGMA <- matrix(rep(0, l), ncol = l)
SIGMA
i <-0
beta = 0.5
step <- 0.001
MU <- c(seq(0, 3, step)) #We create a large vector of means
l <- length(MU)
SIGMA <- matrix(c(rep(0, l)), ncol = l)
SIGMA
beta = 0.5
step <- 0.001
MU <- c(seq(0, 3, step)) #We create a large vector of means
l <- length(MU)
SIGMA <- matrix(c(rep(0, l)), ncol = l)
i <- 0
c <- 0
while(i<l){
SIGMA[i]=1
while(c<l){
SIGMA[i+c]=beta
c<-c+1
}
c<-0
i<-i+1
}
SIGMA
beta = 0.5
step <- 0.001
MU <- c(seq(0, 3, step)) #We create a large vector of means
l <- length(MU)
SIGMA <- matrix(c(rep(0, l)), ncol = l)
i <- 0
c <- 0
while(i<l){
SIGMA[i]=1
while(c<l){
SIGMA[i+c]=beta
c<-c+1
i<-i+1
}
c<-0
}
beta = 0.5
step <- 0.001
MU <- c(seq(0, 3, step)) #We create a large vector of means
l <- length(MU)
#We create a matrix filled with 0s
SIGMA <- matrix(c(rep(0, l)), ncol = l)
i <- 0
c <- 0
# We create a loop that is going to fill the matrix with the right values
while(i<l){
SIGMA[i]=1
while(c<l){
SIGMA[i+c]=beta
c<-c+1
i<-i+1
}
c<-0
}
SIGMA
# We use the same parameters as before and create a arbitrarely large vector of means
beta = 0.5
step <- 0.001
MU <- c(seq(0, 3, step)) #We create a large vector of means
l <- length(MU)
#We create a matrix filled with 0s
SIGMA <- matrix(c(rep(0, l)), ncol = l)
i <- 1
c <- 0
# We create a loop that is going to fill the matrix with the right values
while(i<l){
SIGMA[i]=1
while(c<l){
SIGMA[i+c]=beta
c<-c+1
i<-i+1
}
c<-0
}
SIGMA
library("devtools")
# Change these to suit your needs
dir <- 'C:/Users/Gregory/Desktop/Programmation/Sciences Po/ProgrammationScPo'
name <- 'PracticePackage'
# Create your package
dir.create(paste(paste(dir, name, sep=""), "man", sep="/"))
library("devtools")
# Change these to suit your needs
dir <- 'C:/Users/Gregory/Desktop/Programmation/Sciences Po/ProgrammationScPo/'
name <- 'PracticePackage'
# Create your package
dir.create(paste(paste(dir, name, sep=""), "man", sep="/"))
#' A Hello World Function
#'
#' This function outpus 'Hello World.' That is all.
#' @export
#' @examples
#' print_hello_world()
print_hello_world <- function(){
print("Hello World.")
}
setwd(paste(dir, name, sep=""))
document()
#' A Hello World Function
#'
#' This function outpus 'Hello World.' That is all.
#' @export
#' @examples
#' print_hello_world()
print_hello_world <- function(){
print("Hello World.")
}
setwd(paste(dir, name, sep=""))
document()
#' A Hello World Function
#' A Hello World Function
#'
#' This function outpus 'Hello World.' That is all.
#' @export
#' @examples
#' print_hello_world()
print_hello_world <- function(){
print("Hello World.")
}
setwd(paste(dir, name, sep=""))
document()
setwd(dir)
install(name)
dir <- 'C:/Users/Gregory/Desktop/Programmation/Sciences Po/ProgrammationScPo/'
name <- 'PracticePackage'
setwd(dir)
install(name)
print_hello_world()
